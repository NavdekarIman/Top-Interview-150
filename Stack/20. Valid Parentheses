- 20. Valid Parentheses

class Solution {
    char[] stack;
    int top = -1;
    void push(char a){
        top++;
        stack[top] = a;
    }
    char pop(){
        if(top == -1)
        return '*';
        char val = stack[top];
        top--;
        return val;
    }
    public boolean isValid(String s) {
        char[] arr = s.toCharArray();
        stack = new char[arr.length];
        for(int i = 0; i < arr.length; i++){
            switch(arr[i]){
                case '(':  push('(');break;
                case '[':  push('[');break;
                case '{':  push('{');break;
                case ')': if(pop()!='(') return false;break;
                case ']': if(pop()!='[') return false;break;
                case '}': if(pop()!='{') return false;break;
            }
        }
        return top<0;    
    }
}
/*
import java.util.Stack;
class Solution {
    public boolean isOpening(char c){
        return (c == '(' || c == '{' || c == '[');
    }
    public boolean isMatching(char a, char b){
        return (a == '(' && b == ')') || (a == '{' && b == '}') || (a == '[' && b == ']');
    }
    public boolean isValid(String s){
        Stack<Character> stack = new Stack<>();
        for (int i = 0; i < s.length(); i++){
            char current = s.charAt(i); //top
            if (isOpening(current)){ 
                stack.push(current);
            } else {
                if (stack.isEmpty()){
                    return false;
                }
                char top = stack.pop();
                if (!isMatching(top, current)){
                    return false;
                }
            }
        }
        return stack.isEmpty();
    }
}
*/